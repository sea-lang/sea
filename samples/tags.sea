use std/io

tag Suit(Spade, Heart, Club, Diamond)

tag Face(
	Jack  = 10
	Queen = 11
	King  = 12
)

rec Card(suit: Suit, value: u8)

// Tagged records (aka tagged unions) are similar to enums, but can store additional data with them.
// You can think of them as being an enum of records.
tag rec Move(
	Play(card: Card),
	Draw(),
	SomethingElse(suit: Suit, card_value: u8)
)

fun play_card(suit: Suit) ->
	switch suit {
		case Suit'Spade   -> io'println("You played a spade!")
		case Suit'Heart   -> io'println("You played a heart!")
		case Suit'Club    -> io'println("You played a club!")
		case Suit'Diamond -> io'println("You played a diamond!")
	}

fun play(move: Move) ->
	// TODO: When I implement type inference, I should be able to check if I am switching over a tagged union, and if so, make `.kind` implicit.
	switch move.kind {
		case Move'Play -> play_card(move.Play.card.suit)
		case Move'Draw -> io'println("You drew a card!")
		case Move'SomethingElse -> printf(c"SomethingElse: %d\n", move.SomethingElse.card_value)
	}

fun main(): int {
	play(new Move(Move'Play, new Card(Suit'Spade)))
	play(new Move(Move'Play, new Card(Suit'Heart)))
	play(new Move(Move'Play, new Card(Suit'Club)))
	play(new Move(Move'Play, new Card(Suit'Diamond)))
	play(new Move(Move'Draw))
	play(new Move(Move'SomethingElse, Suit'Spade, 21))
	play(new Move(Move'SomethingElse, Suit'Diamond, 42))

	// You've probably noticed that switch statements automatically break. If you need to manually break them, you can use a fall case:
	switch 2 {
		case 0 -> io'println("Zero")
		case 1 -> io'println("One")
		fall case 2 -> io'println("Two")
		fall case 3 -> io'println("Three")
		case 4 -> io'println("Four")
		case 5 -> io'println("Five")
		else -> io'println("Six or more")
	}
	// The above outputs "Two", "Three", and "Four".
}
