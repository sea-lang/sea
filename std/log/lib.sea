use std/io
use std/fs

pkg log {
	rec Log(log_to_stdout: bool, file: fs'File)

	tag LogLevel(Debug, Info, Warn, Error)

	pkg _internal {
		fun log(log: ^log'Log, level: log'LogLevel, text: String) {
			if log^.file != nil {
				fprintf(log^.file, c"[")
				switch level {
					case log'LogLevel'Debug -> fprintf(log^.file, c"D")
					case log'LogLevel'Info -> fprintf(log^.file, c"I")
					case log'LogLevel'Warn -> fprintf(log^.file, c"W")
					case log'LogLevel'Error -> fprintf(log^.file, c"E")
				}
				fprintf(log^.file, c"] ")
				fprintf(log^.file, text.str, text.len)
				fprintf(log^.file, c"\n")
			}

			if log^.log_to_stdout {
				io'print("[")
				switch level {
					case log'LogLevel'Debug -> io'print("D")
					case log'LogLevel'Info -> io'print("I")
					case log'LogLevel'Warn -> io'print("W")
					case log'LogLevel'Error -> io'print("E")
				}
				io'print("] ")
				io'println(text)
			}
		}
	}

	fun debug(log: ^log'Log, text: String) -> log'_internal'log(log, log'LogLevel'Debug, text)
	fun info(log: ^log'Log, text: String) -> log'_internal'log(log, log'LogLevel'Info, text)
	fun warn(log: ^log'Log, text: String) -> log'_internal'log(log, log'LogLevel'Warn, text)
	fun error(log: ^log'Log, text: String) -> log'_internal'log(log, log'LogLevel'Error, text)
}
